--- a/config.def.h
+++ b/config.def.h
@@ -1,12 +1,14 @@
 /* alt-tab configuration */
 +#define TITLEBAR_HEIGHT 15
 static const unsigned int tabModKey 		= 0x40;	/* if this key is hold the alt-tab functionality stays acitve. This key must be the same as key that is used to active functin altTabStart `*/
 static const unsigned int tabCycleKey 		= 0x17;	/* if this key is hit the alt-tab program moves one position forward in clients stack. This key must be the same as key that is used to active functin altTabStart */

@@ -121,6 +123,7 @@
 	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
 	{ ClkWinTitle,          0,              Button1,        togglewin,      {0} },
 	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
+	{ ClkTitlebar,          0,              Button1,        movemouse,           {.i = 0} },
 	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
 	{ ClkClientWin,         Mod1Mask,         Button1,        movemouse,      {0} },
 	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },

--- a/dwm.c
+++ b/dwm.c
@@ -79,7 +79,7 @@
 enum { Manager, Xembed, XembedInfo, XLast }; /* Xembed atoms */
 enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
-       ClkClientWin, ClkRootWin, ClkLast }; /* clicks */
+       ClkClientWin, ClkRootWin, ClkLast, ClkTitlebar }; /* clicks */
 
 typedef union {
 	int i;
@@ -111,6 +111,8 @@
 	Client *snext;
 	Monitor *mon;
 	Window win;
+	Window titlebar;
+        Drw *titlearea;
 };
 
 typedef struct {
@@ -273,6 +275,7 @@
 static void updatewmhints(Client *c);
 static void view(const Arg *arg);
 static Client *wintoclient(Window w);
+static Client *titlebartoclient(Window w);
 static Monitor *wintomon(Window w);
 static Client *wintosystrayicon(Window w);
 static int xerror(Display *dpy, XErrorEvent *ee);
@@ -324,6 +327,39 @@
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
 /* function implementations */
+
+
+void create_titlebar(Client *c) {
+    XWindowAttributes wa;
+    XGetWindowAttributes(dpy, c->win, &wa);
+    XSetWindowAttributes wattr = {
+        .override_redirect = True,
+        .background_pixel = scheme[c == selmon->sel ? SchemeSel : SchemeNorm][ColBg].pixel,
+        .event_mask = ExposureMask | ButtonPressMask | ButtonReleaseMask | ButtonMotionMask
+    };
+    c->titlebar = XCreateWindow(dpy, root, wa.x, wa.y - TITLEBAR_HEIGHT, wa.width+borderpx*2, TITLEBAR_HEIGHT, 0,
+                                DefaultDepth(dpy, screen), CopyFromParent, DefaultVisual(dpy, screen),
+                                CWOverrideRedirect | CWBackPixel | CWEventMask, &wattr);
+    c->titlearea = drw_create(dpy,screen,c->titlebar,sw,TITLEBAR_HEIGHT);
+    drw_setfontset(c->titlearea,drw->fonts);
+}
+
+void draw_titlebar(Client *c, int bright) {
+    if(HIDDEN(c)){
+	return;
+    };
+    XClearWindow(dpy,c->titlebar);
+    drw_setscheme(c->titlearea, scheme[ (bright)?(SchemeSel):(SchemeNorm) ] );
+    drw_text(c->titlearea,0,0, c->w + borderpx*2, TITLEBAR_HEIGHT,0,c->name,0);
+    (bright)?(XMapRaised(dpy,c->titlebar)):(XMapWindow(dpy,c->titlebar));
+    drw_map(c->titlearea,c->titlebar,0,0,c->w + borderpx*2,TITLEBAR_HEIGHT);
+}
+
+void remove_titlebar(Client *c) {
+    XUnmapWindow(dpy,c->titlebar);
+    XDestroyWindow(dpy,c->titlebar);
+}                                
+
 void
 applyrules(Client *c)
 {
@@ -510,11 +545,19 @@
 				arg.v = c;
 			}
 		}
-	} else if ((c = wintoclient(ev->window))) {
-		if (focusonwheel || (ev->button != Button4 && ev->button != Button5))
+	}
+	else {
+		if ((c = titlebartoclient(ev->window))) { 
 			focus(c);
-		XAllowEvents(dpy, ReplayPointer, CurrentTime);
-		click = ClkClientWin;
+                        XAllowEvents(dpy, ReplayPointer, CurrentTime);
+                        click = ClkTitlebar;
+		}
+		if ((c = wintoclient(ev->window))) {
+			if ( focusonwheel || (ev->button != Button4 && ev->button != Button5) )
+				focus(c);
+			XAllowEvents(dpy, ReplayPointer, CurrentTime);
+			click = ClkClientWin;
+		}
 	}
 	for (i = 0; i < LENGTH(buttons); i++)
 		if (click == buttons[i].click && buttons[i].func && buttons[i].button == ev->button
@@ -670,6 +712,7 @@
 	ce.above = None;
 	ce.override_redirect = False;
 	XSendEvent(dpy, c->win, False, StructureNotifyMask, (XEvent *)&ce);
+	XSendEvent(dpy, c->titlebar, False, StructureNotifyMask, (XEvent *)&ce);
 }
 
 void
@@ -915,9 +958,14 @@
 expose(XEvent *e)
 {
 	Monitor *m;
+	Client *c;
 	XExposeEvent *ev = &e->xexpose;
-
 	if (ev->count == 0 && (m = wintomon(ev->window))) {
+		for(c = m->clients; c; c = c->next){
+			if(ISVISIBLE(c)){
+				draw_titlebar(c, c == selmon->sel);
+			};
+		};
 		drawbar(m);
 		if (m == selmon)
 			updatesystray();
@@ -949,6 +996,7 @@
 		grabbuttons(c, 1);
 		XSetWindowBorder(dpy, c->win, scheme[SchemeSel][ColBorder].pixel);
 		setfocus(c);
+		draw_titlebar(c,1);
 		XRaiseWindow(dpy, c->win);
 	} else {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
@@ -1183,7 +1231,13 @@
 	setclientstate(c, IconicState);
 	XSelectInput(dpy, root, ra.your_event_mask);
 	XSelectInput(dpy, w, ca.your_event_mask);
-	XUngrabServer(dpy);
+	Window wtb = c->titlebar;
+        static XWindowAttributes catb;
+        XGetWindowAttributes(dpy, wtb, &catb);
+        XSelectInput(dpy, wtb, catb.your_event_mask & ~StructureNotifyMask);
+        XUnmapWindow(dpy, c->titlebar);
+        XSelectInput(dpy, wtb, catb.your_event_mask);
+        XUngrabServer(dpy);
 }
 void
@@ -1253,7 +1307,8 @@
 	c->w = c->oldw = wa->width;
 	c->h = c->oldh = wa->height;
 	c->oldbw = wa->border_width;
-
+	create_titlebar(c);
+        draw_titlebar(c,1);
 	updatetitle(c);
 	if (XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
 		c->mon = t->mon;
@@ -1460,8 +1515,10 @@
 		}
 		if (ev->atom == XA_WM_NAME || ev->atom == netatom[NetWMName]) {
 			updatetitle(c);
-			if (c == c->mon->sel)
+			if (c == c->mon->sel){
 				drawbar(c->mon);
+				draw_titlebar(c,(c == selmon->sel));
+			}
 		}
 		if (ev->atom == netatom[NetWMWindowType])
 			updatewindowtype(c);
@@ -1537,8 +1592,15 @@
 	c->oldh = c->h; c->h = wc.height = h;
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, c->win, CWX|CWY|CWWidth|CWHeight|CWBorderWidth, &wc);
+	XWindowChanges wtb;
+	wtb.x = x;
+        wtb.y = y - TITLEBAR_HEIGHT;
+        wtb.width = w + borderpx*2;
+        wtb.height = TITLEBAR_HEIGHT;
+	XConfigureWindow(dpy, c->titlebar, CWX|CWY|CWWidth|CWHeight, &wtb);
 	configure(c);
 	XSync(dpy, False);
+	draw_titlebar(c,1);
 }
 
 void
@@ -1965,6 +2027,7 @@
 		/* hide clients bottom up */
 		showhide(c->snext);
 		XMoveWindow(dpy, c->win, WIDTH(c) * -2, c->y);
+		XUnmapWindow(dpy,c->titlebar);
 	}
 }
 
@@ -2101,7 +2164,7 @@
 	for (int i = 0;i < m->nTabs;i++) { /* draw all clients into tabwin */
 		c = m->altsnext[i];
 		if(!ISVISIBLE(c)) continue;
-		/* if (HIDDEN(c)) continue; uncomment if you're using awesomebar patch */
+		if (HIDDEN(c)) continue; //(DONE) uncomment if you're using awesomebar patch */
 
 		n++;
 		drw_setscheme(drw, scheme[(c == m->sel) ? SchemeSel : SchemeNorm]);
@@ -2132,7 +2195,7 @@
 		m->nTabs = 0;
 		for(c = m->clients; c; c = c->next) { /* count clients */
 			if(!ISVISIBLE(c)) continue;
-			/* if (HIDDEN(c)) continue; uncomment if you're using awesomebar patch */
+			if (HIDDEN(c)) continue; //(DONE) uncomment if you're using awesomebar patch */
 
 			++m->nTabs;
 		}
@@ -2143,7 +2206,7 @@
 			int listIndex = 0;
 			for(c = m->stack; c; c = c->snext) { /* add clients to the list */
 				if(!ISVISIBLE(c)) continue;
-				/* if (HIDDEN(c)) continue; uncomment if you're using awesomebar patch */
+				if (HIDDEN(c)) continue; //(DONE) uncomment if you're using awesomebar patch */
 
 				m->altsnext[listIndex++] = c;
 			}
@@ -2323,6 +2386,7 @@
 	if (!c)
 		return;
 	grabbuttons(c, 0);
+	draw_titlebar(c,0);
 	XSetWindowBorder(dpy, c->win, scheme[SchemeNorm][ColBorder].pixel);
 	if (setfocus) {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
@@ -2335,7 +2399,7 @@
 {
 	Monitor *m = c->mon;
 	XWindowChanges wc;
-
+	remove_titlebar(c);
 	detach(c);
 	detachstack(c);
 	if (!destroyed) {
 
 void
@@ -2756,9 +2821,22 @@
 				return c;
 	return NULL;
}
+ 
+Client *
+titlebartoclient(Window w)
+{
+        Client *c;
+        Monitor *m;
+
+        for (m = mons; m; m = m->next)
+                for (c = m->clients; c; c = c->next)
+                        if (c->titlebar == w)
+                                return c;
+        return NULL;
+}
+ 
